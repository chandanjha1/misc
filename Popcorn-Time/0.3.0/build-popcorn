#!/bin/bash
#Written by MrVaykadji - http://github.com/MrVaykadji
#Thanks to Andrew for checkAPT, nodejs PPA and libudev fix - http://webupd8.org
#licensed under GPLv3
#for Ubuntu 12.04 and newer

installdir="/opt"
version="dev-0.3"
OfficialURL="http://get-popcorn.com"
issueURL="https://github.com/popcorn-official/popcorn-app/issues"
icon="https://github.com/popcorn-official/popcorn-app/raw/master/src/app/images/icon.png"
log="$HOME/popcorn-build.log"
buildscriptURL="https://raw.githubusercontent.com/MrVaykadji/misc/master/Popcorn-Time/0.3.0/"
buildscript="build-popcorn"
[ "`arch`" == "x86_64" ] && arch=64 || arch=32

#FUNCTIONS
checkAPT() {
for lock in synaptic update-manager software-center apt-get "dpkg " aptitude
do
 if ps -U root -u root u | grep "$lock" | grep -v grep > /dev/null; then 
  echo "
Unexpected Error:
=================
Please close $lock then try again.";
  exit
 fi
done 
}

func_error() {
echo "
Unexpected Error: 
================="
cat $log
echo "
Please try again."
exit 0 
}

func_build() {
#clean directories & files before processing
[ -e "$installdir/Popcorn-Time" ] && read -p "
WARNING: Popcorn-Time is already installed in '$installdir' and will be erased. Do you want to keep the configuration files (bookmarks, watched list, settings, ...) [y/n] ? "
	if [ "$REPLY" == "y" ] ; then
		sudo mkdir -p /tmp/popcorn-config
		sudo cp -r $HOME/.config/Popcorn-Time/data /tmp/popcorn-config/ &> /dev/null
		sudo rm -rf $HOME/.config/Popcorn-Time/*
		sudo cp -r /tmp/popcorn-config/data $HOME/.config/Popcorn-Time/ &> /dev/null && sudo chown -Rf $USER:$USER $HOME/.config/Popcorn-Time/data && sudo chmod -R 774 $HOME/.config/Popcorn-Time/data
	else	
		sudo rm -rf $HOME/.config/Popcorn-Time/
	fi
echo ""
sudo rm -rf $installdir/Popcorn-Time /usr/share/pixmaps/popcorntime.png /usr/bin/popcorn-time /usr/share/applications/popcorn-time.desktop $HOME/tmp $HOME/popcorn-app-$version $HOME/npm-debug.log $HOME/.npm $HOME/.cache/bower $HOME/.config/configstore/insight-bower.yml $HOME/.config/configstore/update-notifier-bower.yml $HOME/.local/share/bower $log $HOME/$version.zip

#dependencies install
checkAPT
echo "- Checking for dependencies 'nodejs', 'wget' and 'unzip'..."
[[ -n `egrep -v '^#|^ *$' /etc/apt/sources.list /etc/apt/sources.list.d/* | grep chris-lea/node.js` ]] && nodeppa=1 || nodeppa=0
[ $nodeppa == "0" ] && sudo apt-add-repository -y ppa:chris-lea/node.js &> $log && sudo apt-get update &> $log
sudo apt-get install nodejs wget unzip -y &> $log && echo -e "  ...Ok !\n" || error=1
[ "$error" != "0" ] && func_error

#download source
echo "- Downloading '$version' sources from GitHub..."
cd $HOME
wget https://github.com/popcorn-official/popcorn-app/archive/$version.zip -O $version.zip &> $log && unzip $version.zip &> $log && rm $version.zip && echo -e "  ...Ok !\n" || error=1
[ "$error" != "0" ] && func_error

#repair broken nodejs symlink
[ ! -e /usr/bin/node ] && sudo ln -s /usr/bin/nodejs /usr/bin/node
#symlink libudev.so on 12.04
if [ `lsb_release -cs` == "precise" ] ; then
 [ "$arch" == "64" ] && [ ! -e /lib/x86_64-linux-gnu/libudev.so.1 ] && sudo ln -s /lib/x86_64-linux-gnu/libudev.so.0 /lib/x86_64-linux-gnu/libudev.so.1
 [ "$arch" == "32" ] && [ ! -e /lib/i386-linux-gnu/libudev.so.1 ] && sudo ln -s /lib/i386-linux-gnu/libudev.so.0 /lib/i386-linux-gnu/libudev.so.1
fi
   
#configure
cd popcorn-app-$version
echo "- Installing NPM dependencies 'grunt-cli' and 'bower'..."
sudo npm install -g grunt-cli bower &> $log && echo -e "  ...Ok !\n" || error=1
[ "$error" != "0" ] && func_error

echo "- Running 'npm install'..."
sudo chown -R $USER:$USER $HOME/popcorn-app-$version/ $HOME/tmp && npm install --yes &> $log && echo -e "  ...Ok !\n" || error=1
[ "$error" != "0" ] && func_error

#build with grunt
buildvar=0
read -p "You can build for this machine only (linux$arch) or for all plateforms, including : Mac, Windows, Linux 32-bits, Linux 64-bits.

For what platforms do you wish to build (for multiple builds, separate each platform with a comma)
[mac/win/linux32/linux64/all] : " input
IFS=',' read -a options <<< "$input"

shopt -s extglob

for option in "${options[@]}"; do
    case "$option" in
        win|mac|linux32|linux64|all)
            buildcommand="${buildcommand:+$buildcommand,}$option"
            buildvar=1;;
        *)
            printf 'Invalid option "%s" ignored.\n' "$option";;
    esac
done

if (( !buildvar )); then
    echo "Incorrect input. Default build 'linux$arch' selected."
    buildcommand="linux$arch"
fi
[[ -n "`echo $buildcommand | grep all`" ]] && buildcommand="all"

echo "
- Building with 'grunt'..."
grunt build --platforms=$buildcommand &> $log && echo -e "   ...Ok !\n" || error=1
[ "$error" != "0" ] && func_error

echo "Popcorn-Time has been built in : 
  «$HOME/popcorn-app-$version/build/releases/Popcorn-Time/»
" 
}

func_install() {
#install only if build was made for current machine.
[ "`echo $buildcommand | grep -v linux$arch`" ] && exit 0

#install?
read -p "Do you wish to install Popcorn-Time on this computer [y/n] ? "
[ "$REPLY" != "y" ] && exit 0
  
#install in $installdir
sudo mkdir -p $installdir
sudo cp -r $HOME/popcorn-app-$version/build/releases/Popcorn-Time/linux$arch/Popcorn-Time $installdir

#create commandline launcher
echo "
- Creating commandline launcher..."
echo "#!/bin/bash
echo \"Popcorn Time
============\"

[ \"\$EUID\" == \"0\" ] && echo \"Error: You need to run this without 'root' or 'sudo' privileges.\" && exit 0

helpsection() {
echo \"Version $version
Downloaded from $OfficialURL

Options:
  -h, --help		Display this help.
  -q,--quiet		Launch Popcorn-Time without output.
  --flush		Flush databases.
  --fix-node		Fix the node-webkit 'blank' error.
  --uninstall		Uninstall Popcorn-Time.
  --issue		Report an issue.
  --build		Build latest $version.\"
}

flush_all() {
echo \"- Flushing databases...\"
sudo rm -rf $HOME/.config/Popcorn-Time
}

uninstall() {
echo \"- Uninstalling Popcorn-Time and removing configuration files...\"
sudo bash $installdir/Popcorn-Time/uninstall.sh
}

popcorntimequiet() {
echo \"Starting...\"
nohup $installdir/Popcorn-Time/Popcorn-Time &> /dev/null &
exit 0
}

popcorntime() {
$installdir/Popcorn-Time/Popcorn-Time
}

reportissue() {
echo \"Here is what a great bug report looks like:


###############################
Describe the problem here

Version: $version for Linux $arch bits
Downloaded from: $OfficialURL
OS: `lsb_release -si` `lsb_release -sr` `arch`
Connection: X mbps

How to reproduce:
 - Step 1
 - Step 2
 - Step 3
Actual result:
 - X goes wrong
Expected result:
 - X should go like that
###############################\"
xdg-open $issueURL & >> /dev/null
}

fix_node() {
echo \"Fixing node-webkit...\"
rm -rf $HOME/.config/node-webkit
}

build_pt() {
cd
echo \"Building script fetched from GitHub...\"
wget -q $buildscriptURL$buildscript
bash $buildscript
}

case \$1 in
	-h|--help)
		helpsection
		;;
	--uninstall)
		uninstall
		;;
	--flush)
		flush_all
		;;
	--fix-node)
		fix_node
		;;
	--issue)
		reportissue
		;;
	-q|--quiet)
		popcorntimequiet
		;;
	--build)
		build_pt
		;;
	*)
		popcorntime
		;;
esac" | sudo tee /usr/bin/popcorn-time &> /dev/null
sudo chmod +x /usr/bin/popcorn-time
echo "    «/usr/bin/popcorn-time»
"

#desktop file
echo "- Creating launcher... "
sudo wget $icon -qO /tmp/popcorntime.png
sudo cp /tmp/popcorntime.png /usr/share/pixmaps/
echo "[Desktop Entry]
Comment=Watch movies in streaming with P2P.
Comment[fr]=Regarder des films en streaming.
Name=Popcorn Time
Exec=/usr/bin/popcorn-time
StartupNotify=false
Type=Application
Icon=popcorntime
Actions=ForceClose;ReportIssue;FlushDB;FixNode;
Keywords=P2P;streaming;movies;tv;series;shows;
Keywords[fr]=P2P;streaming;films;séries;télévision;tv;

[Desktop Action ForceClose]
Name=Force close
Name[fr]=Forcer la fermeture
Exec=killall Popcorn-Time
OnlyShowIn=Unity;

[Desktop Action ReportIssue]
Name=Report Issue
Name[fr]=Rapporter un problème
Exec=xdg-open $issueURL
OnlyShowIn=Unity;

[Desktop Action FlushDB]
Name=Flush databases
Name[fr]=Vider les bases de données
Exec=sh -c \"rm -rf $HOME/.config/Popcorn-Time ; killall Popcorn-Time ; /usr/bin/popcorn-time\"
OnlyShowIn=Unity;

[Desktop Action FixNode]
Name=Fix Node-Webkit
Name[fr]=Réparer Node-Webkit
Exec=sh -c \"rm -rf $HOME/.config/node-webkit ; killall Popcorn-Time ; /usr/bin/popcorn-time\"
OnlyShowIn=Unity;" | sudo tee /usr/share/applications/popcorn-time.desktop &> /dev/null
sudo chmod +x /usr/share/applications/popcorn-time.desktop
echo "    «/usr/share/applications/popcorn-time.desktop»
"

#uninstall
echo "- Creating uninstall script..."
echo "#!/bin/bash
#uninstallation script for Popcorn-Time

#clean directory
sudo rm -rf $installdir/Popcorn-Time

#clean config
sudo rm -rf $HOME/.config/Popcorn-Time

#clean icon
sudo rm -rf /usr/share/pixmaps/popcorntime.png

#clean launchers
sudo rm -rf /usr/bin/popcorn-time
sudo rm -rf /usr/share/applications/popcorn-time.desktop
" | sudo tee $installdir/Popcorn-Time/uninstall.sh &> /dev/null
sudo chmod +x $installdir/Popcorn-Time/uninstall.sh
echo "    «$installdir/Popcorn-Time/uninstall.sh»
" 
}

func_clean() {
#remove building files if linux$arch only was selected
if [ "$buildcommand" == "linux$arch" ] ; then
read -p "Do you wish to remove all the building files [y/n] ? "
 [ "$REPLY" == "y" ] && sudo rm -rf $HOME/tmp $HOME/popcorn-app-$version $HOME/npm-debug.log $HOME/.npm $HOME/.cache/bower $HOME/.config/configstore/insight-bower.yml $HOME/.config/configstore/update-notifier-bower.yml $HOME/.local/share/bower $log && echo "... Done.
"
fi

#remove installed packages only if they weren't before building
if [ $nodeppa == "0" ] ; then
read -p "Do you wish to uninstall the packages installed for this build [y/n] ? "
[ "$REPLY" == "y" ] && sudo apt-get purge nodejs -y &> /dev/null && sudo apt-get autoremove -y &> /dev/null && sudo rm -rf /usr/bin/node && sudo add-apt-repository -yr ppa:chris-lea/node.js &> /dev/null && echo "... Done.
" 
fi 
} 

########
#SCRIPT#
########
[ "$EUID" == "0" ] && echo "Error. You need to run this without 'root' or 'sudo' privileges." && exit 0 #if root, exit

#information
echo "
Popcorn-Time $version for Ubuntu-Linux
=====================================
WARNING: Popcorn Time streams movies from Torrents. 
Downloading copyrighted material may be illegal in your country. 
!!! Use at your own risk !!!
"

#enter sudo password.
sudo test 
error=0

func_build
func_install
func_clean

echo "=================================================
Popcorn-Time is now installed ! 

Type «popcorn-time --help» for more information."
